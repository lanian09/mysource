FileName : LOG_member_Get_func.c
Set : iterate_comments = ON

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <ctype.h>

/** @code
$save_typedef_member_(typedef_name){member명} = membertype;
$save_typedef_member_(member명){typedef_name} = membertype;
$save_typedef_member_{member명} = membertype; // 처음 것을 set하고 다음 것들은 모두 같은 값이어야 한다. 


int Get_SrvL7Code (int type , int len , void *thisLOG)
{
	선언 ; 

	switch(type){
		case  : ;
		default : return 0;
	}
}
@endcode 
*/

ITERATE %save_typedef_member +<<+ ITKEY  ITVALUE
Set : function_def{Get_Member_ITKEY} = "ITVALUE +<+$save_typedef_member_array{ITKEY}+>+ Get_Member_ITKEY(int type , void *thisLOG)"
ITVALUE +<+$save_typedef_member_array{ITKEY}+>+ Get_Member_ITKEY(int type , void *thisLOG){
	//// ITKEY : member  , ITVALUE : type

	ITERATE %save_typedef_member_ITKEY +<<+ IT2KEY  IT2VALUE
	IT2KEY 	*pIT2KEY;
	+>>+

	switch(type){
	ITERATE %save_typedef_member_ITKEY +<<+ IT2KEY  IT2VALUE
	case IT2KEY_DEF_NUM:
		pIT2KEY = (IT2KEY *) thisLOG;
		FPRINTF(LOG_LEVEL,"%s : %s : type %d , thisLOG %p\n","IT2KEY","ITKEY",type,thisLOG);
		return ( ITVALUE +<+$save_typedef_member_array{ITKEY}+>+ ) pIT2KEY->ITKEY;
	+>>+
	default : 
		FPRINTF(LOG_LEVEL,"%s : type %d , thisLOG %p\n","ITKEY",type,thisLOG);
		break;
	}
	return ( ITVALUE +<+$save_typedef_member_array{ITKEY}+>+ ) 0;
}



+>>+

int	Get_Member_0(int type , void *thisLOG)
{
	return 1;
}

int	Get_Member_1(int type , void *thisLOG)
{
	return 1;
}



/** Set_Value function.
 *
 *  값을 Set하기 위한 함수. Type에 따라 Set을 수행.
 *
 *  @param      ToType  : STG_INTEGER or STG_STRING or STG_IP
 *  @param      ToPtrChar  :  destination character pointer for copying from from_value (in caseof STG_STRING)
 *  @param      ToPtrInt  :  destination integer pointer for copying from from_value (in case of STG_INTEGER or IP)
 *  @param      ToSize  : allocation bytes size
 *  @param      FromType  : STG_INTEGER or STG_STRING or STG_IP
 *  @param      FromPtrChar  :  source character pointer for copying to destination (in case of STG_STRING)
 *  @param      FromPtrInt  :  source integer pointer for copying to destination (in case of STG_INTEGER or IP)
 *  @param      FromSize  : source bytes size
 *  @param      Get_Value  : (function pointer) This function is running when Totype is STG_DEF.
 *
 *  @return		SUCCESS : 0 , FAIL 1
 *
 *  @note		이 함수를 이용하여 자동화시 생성되는 값들에 대한 Set을 수행한다.
 *			
**/
Set : function_def{Set_Value} = "int Set_Value( int ToType, char *ToPtrChar , int *ToPtrInt, int ToSize ,int FromType, char *FromPtrChar , int *FromPtrInt , int FromSize , int (*Get_Value)(char *))"
int Set_Value( int ToType, char *ToPtrChar , int *ToPtrInt, int ToSize
		,int FromType, char *FromPtrChar , int *FromPtrInt , int FromSize
		,int (*Get_Value)(char *)
		)
{
	if( (ToType == STG_INTEGER) && (FromType == STG_INTEGER) ){
		if(*ToPtrInt){  return -1; }
		if(ToSize != FromSize) { 
			FPRINTF(LOG_LEVEL," ERROR : value size is wrong!!! \n"); 
			return 1;
		}
		memcpy(ToPtrInt , FromPtrInt , ToSize);
	} else if( (ToType == STG_INTEGER) && (FromType == STG_STRING) ) {
		if(*ToPtrInt){  return -1; }
		if(ToSize == 4){
			* ( (int *) ToPtrInt)		= atoi((char *) FromPtrChar);
			FPRINTF(LOG_LEVEL,"%s : atoi %d", (char *)__FUNCTION__,*( (int *) ToPtrInt) );
		} else if(ToSize == 2){
			* ( (short *) ToPtrInt) 	= (short) atoi((char *) FromPtrChar);
			FPRINTF(LOG_LEVEL,"%s : atoi %d", (char *)__FUNCTION__,*( (short *) ToPtrInt) );
		} else if(ToSize == 1){
			* ( (char *) ToPtrInt)		= (char) atoi((char *) FromPtrChar);
			FPRINTF(LOG_LEVEL,"%s : atoi %d", (char *)__FUNCTION__,*( (char *) ToPtrInt) );
		} else {
			FPRINTF(LOG_LEVEL," ERROR : INTEGER value's size is wrong!!! \n"); 
			return 1;
		}
	} else if( (ToType == STG_STRING) && (FromType == STG_INTEGER) ) {
		char buf[BUFSIZ];
		if(ToPtrChar[0]){  return -1; }
		sprintf(buf,"%d", *( (int *) FromPtrInt));
		if(strlen(buf) >= ToSize){
			FPRINTF(LOG_LEVEL," ERROR : INTEGER value is very large!!! \n"); 
			return 1;
		} else {
			sprintf(ToPtrChar,"%d",* ( (int *) FromPtrInt));
		}
	} else if( (ToType == STG_STRING) && (FromType == STG_STRING) ) {
		int size;
		if(ToPtrChar[0]){  return -1; }
		if(FromSize > (ToSize-1) ){ size = ToSize -1; }
		else { size = FromSize; }
		memcpy(ToPtrChar, FromPtrChar, size);
		*(ToPtrChar + size) = 0;
	} else if( (ToType == STG_IP) && (FromType == STG_STRING) ) {
		if(ToSize == 4){
			* ( (int *) ToPtrInt)		= ntohl(inet_addr((char *) FromPtrChar));
		} else {
			FPRINTF(LOG_LEVEL," ERROR : INTEGER value's size is wrong!!! \n"); 
			return 1;
		}
	} else if( (ToType == STG_DEF) && (FromType == STG_STRING) ) {
		if(*ToPtrInt){  return -1; }
		if(ToSize == 4 || ToSize == 8){
			if(Get_Value != 0){
				* ( (int *) ToPtrInt)		= Get_Value((char *) FromPtrChar);
			} else {
				* ( (int *) ToPtrInt)		= 0;
			}
			FPRINTF(LOG_LEVEL,"%s : DEF %d (%s)", (char *)__FUNCTION__,*( (int *) ToPtrInt) , FromPtrChar );
		} else {
			FPRINTF(LOG_LEVEL," ERROR : INTEGER value's size is wrong!!! \n"); 
			return 1;
		}
	} else {		/* ( (ToType == STG_STRING) && (FromType == STG_STRING) ) */
		FPRINTF(LOG_LEVEL," ERROR : STG_STRING %d   , STG_INTEGER %d , STG_IP %d\n",STG_STRING,STG_INTEGER,STG_IP);
		FPRINTF(LOG_LEVEL," ERROR : ToType %d , FromType %d\n",ToType,FromType); 
		return 1;
	}


	return 0;
}




ITERATE %TAG_DEF_ALL +<<+ ITKEY  ITVALUE
char *
print_TAG_DEF_ALL_ITKEY(char *prefixstring, int type){
Set : function_def{print_TAG_DEF_ALL_ITKEY} = "char * print_TAG_DEF_ALL_ITKEY(char *prefixstring, int type)"
	switch(type){
	ITERATE %TAG_DEF_ALL_ITKEY +<<+ IT2KEY  IT2VALUE
		case IT2KEY:
			FPRINTF(LOG_LEVEL,"%s : ITKEY definition name : %s  (%d)\n",prefixstring,"IT2KEY",type);
			return "IT2KEY";
	+>>+
		default :
			FPRINTF(LOG_LEVEL,"%s : ITKEY type name : unknown\n",prefixstring);
			return "UNKNOWN";
	}
	return "UNKNOWN";
}

+>>+




ITERATE %TAG_DEF_ALL +<<+ ITKEY  ITVALUE
char *
PRINT_TAG_DEF_ALL_ITKEY(int type){
Set : function_def{PRINT_TAG_DEF_ALL_ITKEY} = "char * PRINT_TAG_DEF_ALL_ITKEY(int type)"
	switch(type){
	ITERATE %TAG_DEF_ALL_ITKEY +<<+ IT2KEY  IT2VALUE
		case IT2KEY:
			NotIFEQUAL(+<+$abbreviation_define_name{IT2KEY}+>+,) return "+<+$abbreviation_define_name{IT2KEY}+>+";
			IFEQUAL(+<+$abbreviation_define_name{IT2KEY}+>+,) return "IT2KEY"; 
	+>>+
		default :
			return "UNKNOWN";
	}
	return "UNKNOWN";
}

+>>+




ITERATE %TAG_AUTO_STRING_DEF +<<+ ITKEY  ITVALUE
void
print_TAG_AUTO_STRING_DEF_ITKEY(char *prefixstring, int type){
Set : function_def{print_TAG_AUTO_STRING_DEF_ITKEY} = "void print_TAG_AUTO_STRING_DEF_ITKEY(char *prefixstring, int type)"
	ITERATE %TAG_DUAL_STRING_ITKEY +<<+ IT2KEY  IT2VALUE
	if(IT2VALUE == type){  
		FPRINTF(LOG_LEVEL,"%s : ITKEY STRING definition name : %s  (%d)\n",prefixstring,"IT2KEY",type);
	}
	+>>+
	return ;
}

+>>+



ITERATE %TAG_AUTO_STRING_DEF +<<+ ITKEY  ITVALUE
int 
Get_TAG_AUTO_STRING_DEF_ITKEY(char *comp_str){
Set : function_def{Get_TAG_AUTO_STRING_DEF_ITKEY} = "int Get_TAG_AUTO_STRING_DEF_ITKEY(char *comp_str)"
	int size1,size2;
	int size;

	size2 = strlen(comp_str);

	IFEQUAL(+<+$TAG_AUTO_STRING_DEF_CASE_IGNORE{ITKEY}+>+,YES) #{
	{
		int __i;
		for(__i = 0; __i < size2 ; __i++){
			comp_str[__i] = tolower(comp_str[__i]);
		}
	}
	}#

	ITERATE %TAG_DUAL_STRING_ITKEY +<<+ IT2KEY  IT2VALUE
	size1 = strlen("IT2KEY");
	size = (size1 > size2) ? size2 : size1;		/// Minimum
	if((size1 <= size2) && (!memcmp(comp_str,"IT2KEY",size)) ){
		FPRINTF(LOG_LEVEL,"%s : %d : %s\n",(char *)__FUNCTION__,IT2VALUE,"IT2KEY");
		return  IT2VALUE;
	}
	+>>+

	return 0;
}

+>>+

int 
Get_TAG_DEF_ALL_0(char *comp_str){
Set : function_def{Get_TAG_DEF_ALL_0} = "int Get_TAG_DEF_ALL_0(char *comp_str)"
	return 0;
}



ITERATE %TAG_DEF_ALL +<<+ ITKEY  ITVALUE
int 
Get_TAG_DEF_ALL_ITKEY(char *comp_str){
Set : function_def{Get_TAG_DEF_ALL_ITKEY} = "int Get_TAG_DEF_ALL_ITKEY(char *comp_str)"
	int size1,size2;
	int size;

	size2 = strlen(comp_str);

	ITERATE %TAG_DEF_ALL_ITKEY +<<+ IT2KEY  IT2VALUE
	size1 = strlen("IT2KEY");
	size = (size1 > size2) ? size2 : size1;		/// Minimum
	if((size1 <= size2) && (!memcmp(comp_str,"IT2KEY",size)) ){
		FPRINTF(LOG_LEVEL,"%s : %d : %s\n",(char *)__FUNCTION__,IT2VALUE,"IT2KEY");
		return  IT2VALUE;
	}
	+>>+

	return 0;
}

+>>+





int 
Is_LOG_Type(int type){
Set : function_def{Is_LOG_Type} = "int Is_LOG_Type(int type)"
	int ret=0;

	switch(type){
	ITERATE %table_log +<<+ ITKEY  ITVALUE
	case ITKEY_DEF_NUM:
		FPRINTF(LOG_LEVEL,"IS_LOG_Type : ITKEY_DEF_NUM = %d : type %d\n" , ITKEY_DEF_NUM , type);
		ret = 1;
		break;
	+>>+
	default :
		FPRINTF(LOG_LEVEL,"IS_LOG_Type : Default  type %d\n" , type);
		ret = 0;
		break;
	}

	return ret;
}




char *
PRINT_DEF_NUM_table_log(int type){
Set : function_def{PRINT_DEF_NUM_table_log} = "char * PRINT_DEF_NUM_table_log(int type)"
	switch(type){
	ITERATE %table_log +<<+ IT2KEY  IT2VALUE
		case IT2KEY_DEF_NUM:
			return "IT2KEY_DEF_NUM";
	+>>+
		default :
			return "UNKNOWN";
	}
	return "UNKNOWN";
}




ITERATE %save_typedef_name +<<+ ITKEY  ITVALUE
void 
Compare_ITVALUE(char *prefix_string, ITVALUE *pprev, ITVALUE *pnext){
Set : function_def{Compare_ITVALUE} = "void Compare_ITVALUE(char *prefix_string,ITVALUE *pprev, ITVALUE *pnext)"

	ITERATE %save_typedef_name_ITVALUE +<<+ IT2KEY  IT2VALUE
	IFEQUAL(+<+$save_typedef_name_ITVALUE_array{IT2KEY}+>+,U8) #{
	if( strncmp(pprev->IT2KEY , pnext->IT2KEY , +<+$save_typedef_member_arr_size_IT2KEY{ITVALUE}+>+ )){
		FPRINTF(LOG_LEVEL,"%s : Prev : ITVALUE->IT2KEY %.*s\n",prefix_string,+<+$save_typedef_member_arr_size_IT2KEY{ITVALUE}+>+ , pprev->IT2KEY);
		FPRINTF(LOG_LEVEL,"%s : Next : ITVALUE->IT2KEY %.*s\n",prefix_string,+<+$save_typedef_member_arr_size_IT2KEY{ITVALUE}+>+ , pnext->IT2KEY);
	}
	}#
	IFEQUAL(+<+$save_typedef_name_ITVALUE_array{IT2KEY}+>+,S8) #{
	if( strncmp(pprev->IT2KEY , pnext->IT2KEY , +<+$save_typedef_member_arr_size_IT2KEY{ITVALUE}+>+ )){
		FPRINTF(LOG_LEVEL,"%s : Prev : ITVALUE->IT2KEY %.*s\n",prefix_string,+<+$save_typedef_member_arr_size_IT2KEY{ITVALUE}+>+ , pprev->IT2KEY);
		FPRINTF(LOG_LEVEL,"%s : Next : ITVALUE->IT2KEY %.*s\n",prefix_string,+<+$save_typedef_member_arr_size_IT2KEY{ITVALUE}+>+ , pnext->IT2KEY);
	}
	}#
	IFEQUAL(+<+$save_typedef_name_ITVALUE_array{IT2KEY}+>+,) #{
	if( pprev->IT2KEY != pnext->IT2KEY){
		FPRINTF(LOG_LEVEL,"%s : Prev : ITVALUE->IT2KEY %d\n",prefix_string,(int) pprev->IT2KEY);
		FPRINTF(LOG_LEVEL,"%s : Next : ITVALUE->IT2KEY %d\n",prefix_string,(int) pnext->IT2KEY);
	}
	}#
	+>>+

	return ;
}

+>>+


int Parse_Set_szContentsType(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)
Set : function_def{Parse_Set_szContentsType} = "int Parse_Set_szContentsType(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)"
{
	int size;	

	// if already existed , we will not do anything.
	if(pLOG_HTTP_TRANS->szContentsType[0] != 0){ 
		// 1 :: After returning from this function , ignore the Set_Value()  (not run)
		return 1;
	}   

	if(MAX_CONTENTSTYPE_LEN < *lexleng){
		size = MAX_CONTENTSTYPE_LEN;
	} else {
		size = *lexleng;
	}
	memcpy(pLOG_HTTP_TRANS->szContentsType,*lextext,size);
	pLOG_HTTP_TRANS->szContentsType[size] = 0;
	// *(ToPtrChar + size) = 0;

	// 0 :: After returning from this function , run the Set_Value()
	return 0;
}

int Get_Detailed_URL(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)
Set : function_def{Get_Detailed_URL} = "int Get_Detailed_URL(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)"
{
	int i;
	char sss[BUFSIZ];
	URL_ANALYSIS *pURL_ANALYSIS;
	char *plextext;

	plextext = *lextext;

	FPRINTF(LOG_LEVEL, "%s : txt %.*s leng %d",(char *)__FUNCTION__ , *lexleng , plextext , *lexleng);

	pURL_ANALYSIS = (URL_ANALYSIS *)sss;
	memset(sss,0,BUFSIZ);
	URL_ANALYSIS_URL_S_LEX(plextext,*lexleng,sss);

	memcpy(pLOG_HTTP_TRANS->MenuID, pURL_ANALYSIS->MenuID , MAX_MENUID_SIZE);
	memcpy(pLOG_HTTP_TRANS->SvcAction, pURL_ANALYSIS->szSvcAction , MAX_SVCACTION_SIZE);
	/// pLOG_HTTP_TRANS->SvcAction = Get_TAG_AUTO_STRING_DEF_SVCACTION(pURL_ANALYSIS->szSvcAction);
	memcpy( pLOG_HTTP_TRANS->ContentID, pURL_ANALYSIS->ContentID , MAX_CONTENTID_SIZE);
	memcpy( pLOG_HTTP_TRANS->CATID, pURL_ANALYSIS->CATID , MAX_CATID_SIZE);
	if(pLOG_HTTP_TRANS->szMIN[0] == 0x00)
		memcpy( pLOG_HTTP_TRANS->szMIN, pURL_ANALYSIS->szURLMIN, MAX_MIN_SIZE);

	for(i=0;i<*lexleng;i++){
		if( (plextext[i] == ' ') || (plextext[i] == '\t')){
			plextext[i] = 0;
			break;
		}
	}
//	pLOG_HTTP_TRANS->usURLSize = i;

	FPRINTF(LOG_LEVEL,"%s : pLOG_HTTP_TRANS->MenuID = %.*s",(char *)__FUNCTION__ , MAX_MENUID_SIZE , pLOG_HTTP_TRANS->MenuID);
	FPRINTF(LOG_LEVEL,"%s : pLOG_HTTP_TRANS->SvcACtion = %.*s",(char *)__FUNCTION__ , MAX_SVCACTION_SIZE , pLOG_HTTP_TRANS->SvcAction);
	FPRINTF(LOG_LEVEL,"%s : pLOG_HTTP_TRANS->ContentID = %.*s",(char *)__FUNCTION__ , MAX_CONTENTID_SIZE , pLOG_HTTP_TRANS->ContentID);
	FPRINTF(LOG_LEVEL,"%s : pLOG_HTTP_TRANS->CATID = %.*s",(char *)__FUNCTION__ , MAX_CATID_SIZE , pLOG_HTTP_TRANS->CATID);


	// 0 :: After returning from this function , run the Set_Value()
	return 0;
}


int Get_Is_CDU(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)
Set : function_def{Get_Is_CDU} = "int Get_Is_CDU(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)"
{
	char *plextext;

	plextext = *lextext;

	FPRINTF(LOG_LEVEL, "%s : txt %.*s leng %d",(char *)__FUNCTION__ , *lexleng , plextext , *lexleng);

	pLOG_HTTP_TRANS->isCDU = 1;
	FPRINTF(LOG_LEVEL,"%s : pLOG_HTTP_TRANS->isCDU = %ld",(char *)__FUNCTION__ , pLOG_HTTP_TRANS->isCDU);

	// 1 :: After returning from this function , ignore the Set_Value()  (not run)
	return 1;
}

int Get_Detailed_Browser_Info(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)
Set : function_def{Get_Detailed_Browser_Info} = "int Get_Detailed_Browser_Info(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)"
{
	int semi_cnt=0;
	int idxBrowserInfo=0;
	char szBrowserInfo[BUFSIZ];
	int idxModel=0;
	char szModel[BUFSIZ];
	int i;
	char *plextext;

	plextext = *lextext;



	if(!memcmp(plextext,"BREW",4)){
		FPRINTF(LOG_LEVEL, "%s : BREW txt %s leng %d",(char *)__FUNCTION__ , plextext , *lexleng);
		for(i=0;(i<*lexleng) && (i<MAX_BROWSERINFO_LEN);i++,plextext++){
			switch(*plextext){
				case ' ':
				case '\t':
				case '(':
					pLOG_HTTP_TRANS->szBrowserInfo[i] = 0;
					return 1;
				default:
					pLOG_HTTP_TRANS->szBrowserInfo[i] = *plextext;
					break;
			}
		}
		pLOG_HTTP_TRANS->szBrowserInfo[i] = 0;
		pLOG_HTTP_TRANS->szBrowserInfo[MAX_BROWSERINFO_SIZE - 1] = 0;
		return 1;
	}

	FPRINTF(LOG_LEVEL, "%s : txt %s leng %d",(char *)__FUNCTION__ , plextext , *lexleng);


	for(i=0;i<*lexleng;i++,plextext++){
		if(*plextext == ';'){ 
			semi_cnt++;
			continue;
		}
		if(semi_cnt == 1){
			szBrowserInfo[idxBrowserInfo]=*plextext;
			idxBrowserInfo++;
		} else if(semi_cnt == 2){
			szModel[idxModel]=*plextext;
			idxModel++;
		} else if (semi_cnt >= 3){
			break;
		}
	}
	szBrowserInfo[idxBrowserInfo]=0;
	szModel[idxModel]=0;

	/// printf("szBrowserInfo : %s\n",szBrowserInfo);
	/// printf("szModel : %s\n",szModel);
	/// printf("strcasecmp=%d\n",memcmp(plextext,";",*lexleng));
	/// printf("*lextext : %s\n",plextext);
	/// printf("*lexleng : %d\n",*lexleng);
	memcpy(pLOG_HTTP_TRANS->szModel,szModel,MAX_MODEL_SIZE);
	pLOG_HTTP_TRANS->szModel[MAX_MODEL_SIZE - 1] = 0;
	memcpy(pLOG_HTTP_TRANS->szBrowserInfo,szBrowserInfo,MAX_BROWSERINFO_SIZE);
	pLOG_HTTP_TRANS->szBrowserInfo[MAX_BROWSERINFO_SIZE - 1] = 0;

	FPRINTF(LOG_LEVEL,"%s : pLOG_HTTP_TRANS->szModel = %.*s",(char *)__FUNCTION__ , MAX_MODEL_SIZE , pLOG_HTTP_TRANS->szModel);
	FPRINTF(LOG_LEVEL,"%s : pLOG_HTTP_TRANS->szBrowserInfo = %.*s",(char *)__FUNCTION__ , MAX_BROWSERINFO_SIZE, pLOG_HTTP_TRANS->szBrowserInfo);

	// 1 :: After returning from this function , ignore the Set_Value()  (not run)
	return 1;
}

int Get_Detailed_User_Agent(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)
Set : function_def{Get_Detailed_User_Agent} = "int Get_Detailed_User_Agent(LOG_HTTP_TRANS *pLOG_HTTP_TRANS , char **lextext, int *lexleng)"
{
	char *plextext;

	plextext = *lextext;


	/* ABCDDEEEEEEFFGGGHHHIIIJJKKLLMMNNOOOOOOOOOOOPPPQQQRRR */
	/* 	ABCDD	5
	 *	EEEEE	10
	 *	EFFGG	15
	 *	GHHHI	20
	 *	IIJJK	25
	 *	KLLMM	30
	 *	NNOOO	35
	 *	OOOOO	40
	 *	OOOPP	45
	 *	PQQQR	50
	 *	RR 
	 */

	if(*lexleng != 52) {
		FPRINTF(LOG_LEVEL, "F=%s:%s.%d RCV_SIZE=%d != 52", __FILE__, __FUNCTION__, __LINE__, *lexleng);
		return 1;
	}

	/* szBrowserInfo = FFGGG (11 - 15) : Browser Type(FF) + Browser Version(GGG) */
	memcpy(pLOG_HTTP_TRANS->szBrowserInfo, &plextext[11], 5);
	pLOG_HTTP_TRANS->szBrowserInfo[5] = 0x00;

	/* szModel = DDEEEEEE (3 - 10) : 단말기 제조업체(DD) + 단말의 모델명(EEEEEE) */
	memcpy(pLOG_HTTP_TRANS->szModel, &plextext[3], 8);
	pLOG_HTTP_TRANS->szModel[8] = 0x00;

#if 0
	/* szSvcOption = C (2) : 단말기 Type(C) */
	memcpy(pLOG_HTTP_TRANS->szSvcOption, &plextext[2], 1);
	pLOG_HTTP_TRANS->szSvcOption[1] = 0x00;
#endif

	/* usServiceType = B (1) : Service 방식(B) */
	pLOG_HTTP_TRANS->usServiceType = plextext[1] - 0x30;

	/* szMIN = OOOOOOOOOOO (32 - 42) : IMSI 규격에 따른 단말기 MDN(OOOOOOOOOOO) */
	memcpy(pLOG_HTTP_TRANS->szMIN, &plextext[32], 11);
	pLOG_HTTP_TRANS->szMIN[11] = 0x00;

	return 1;
}


int PARSING_MIN_Change(URL_ANALYSIS *pURL_ANALYSIS, char **lextext, int *lexleng)
Set : function_def{PARSING_MIN_Change} = "int PARSING_MIN_Change(URL_ANALYSIS *pURL_ANALYSIS, char **lextext, int *lexleng)"
{
	char *plextext;
	int i;

	plextext = *lextext;

	
	FPRINTF(LOG_LEVEL,"%s : MIN0 = %.*s",(char *)__FUNCTION__ , *lexleng, plextext);
	if( (plextext[0] == '8') &&
	    (plextext[1] == '2') ){
		FPRINTF(LOG_LEVEL,"%s : MIN082 = %.*s",(char *)__FUNCTION__ , *lexleng, plextext);
		(*lextext) += 2;
		(*lexleng) -= 2;
		if( plextext[2] == '1' ){
    		plextext[1] = '0';
			(*lextext) -= 1;
			(*lexleng) += 1;
			FPRINTF(LOG_LEVEL,"%s : MIN821 = %.*s",(char *)__FUNCTION__ , *lexleng, *lextext);
		}
	} else {
		FPRINTF(LOG_LEVEL,"%s : MIN01= %.*s",(char *)__FUNCTION__ , *lexleng, plextext);
		if( plextext[0] == '1' ){
			for(i=(*lexleng);i>0;i--){
				plextext[i] = plextext[i-1];
			}
			plextext[0] = '0';
			(*lexleng) += 1;
			plextext[*lexleng] = 0;
		}
		FPRINTF(LOG_LEVEL,"%s : MIN02= %.*s",(char *)__FUNCTION__ , *lexleng, plextext);
	}
	FPRINTF(LOG_LEVEL,"%s : MIN END = %.*s",(char *)__FUNCTION__ , *lexleng, *lextext);

	// 0 :: After returning from this function , run the Set_Value()
	return 0;

}

int PARSING_MIN_Change1(LOG_HTTP_TRANS *pLOG_HTTP_TRANS, char **lextext, int *lexleng)
Set : function_def{PARSING_MIN_Change1} = "int PARSING_MIN_Change1(LOG_HTTP_TRANS *pLOG_HTTP_TRANS, char **lextext, int *lexleng)"
{
	char *plextext;
	int i;

	plextext = *lextext;

	
	FPRINTF(LOG_LEVEL,"%s : MIN0 = %.*s",(char *)__FUNCTION__ , *lexleng, plextext);
	if( (plextext[0] == '8') &&
	    (plextext[1] == '2') ){
		FPRINTF(LOG_LEVEL,"%s : MIN082 = %.*s",(char *)__FUNCTION__ , *lexleng, plextext);
		(*lextext) += 2;
		(*lexleng) -= 2;
		if( plextext[2] == '1' ){
    		plextext[1] = '0';
			(*lextext) -= 1;
			(*lexleng) += 1;
			FPRINTF(LOG_LEVEL,"%s : MIN821 = %.*s",(char *)__FUNCTION__ , *lexleng, *lextext);
		}
	} else {
		FPRINTF(LOG_LEVEL,"%s : MIN01= %.*s",(char *)__FUNCTION__ , *lexleng, plextext);
		if( plextext[0] == '1' ){
			for(i=(*lexleng);i>0;i--){
				plextext[i] = plextext[i-1];
			}
			plextext[0] = '0';
			(*lexleng) += 1;
			plextext[*lexleng] = 0;
		}
		FPRINTF(LOG_LEVEL,"%s : MIN02= %.*s",(char *)__FUNCTION__ , *lexleng, plextext);
	}
	FPRINTF(LOG_LEVEL,"%s : MIN END = %.*s",(char *)__FUNCTION__ , *lexleng, *lextext);

	// 0 :: After returning from this function , run the Set_Value()
	return 0;

}

/** Remake URL to Other Buffer with Delete Port :**/
Set : function_def{Remake_URL_Buf} = "int Remake_URL_Buf(U16 usURLSize, U8 *pURL, U16 *pusOutSize, U8 *pOUTPUT)"
int Remake_URL_Buf(U16 usURLSize, U8 *pURL, U16 *pusOutSize, U8 *pOUTPUT)
{
	int         i, dRet = 0;
	int         dFirst, dLast;

	dFirst = 0;
	if(memcmp(pURL, "https", 5) == 0) {
		dLast = 8;
		i = 8;
	} else {
		dLast = 7;
		i = 7;
	}

	for(; i < usURLSize; i++)
	{
		dLast++;
		if(pURL[i] == '/') {
			dLast--;
			break;
		} else if(pURL[i] == ':') {
			dFirst = i;
		} else if(pURL[i] == '?') {
			break;
		}

	} /* End of For i */

	if(dFirst != 0 ) {
		memcpy(pOUTPUT, pURL, dFirst);
		memcpy(pOUTPUT+dFirst, pURL+dLast, usURLSize - dLast);
		*pusOutSize = DecordURLtoBuf(pURL+dLast, pOUTPUT+dFirst, usURLSize - dLast);
		*pusOutSize += dFirst;
		pOUTPUT[*pusOutSize] = 0x00;
		FPRINTF(LOG_LEVEL, "Remake_URL_Buf3 Len=%d URL=[%.*s] OUT=[%.*s]", *pusOutSize, MAX_URL_SIZE, pURL, MAX_URL_SIZE, pOUTPUT);  
	} else {
		*pusOutSize = DecordURLtoBuf(pURL, pOUTPUT, usURLSize);
		pOUTPUT[*pusOutSize] = 0x00;
		FPRINTF(LOG_LEVEL, "Remake_URL_Buf 1 Len=%d URL=[%.*s] OUT=[%.*s]", *pusOutSize, MAX_URL_SIZE, pURL, MAX_URL_SIZE, pOUTPUT);  
	}

	if(*pusOutSize > 2 && pOUTPUT[*pusOutSize - 1] == '/') {
		(*pusOutSize)--;
		pOUTPUT[*pusOutSize] = 0x00;
		FPRINTF(LOG_LEVEL, "Remake_URL_Buf 2 Last / Remove  Len=%d URL=[%.*s]", *pusOutSize, MAX_URL_SIZE, pOUTPUT);  
	}

	return dRet;
}

/** BODY URL CHECK TYPE : ../../../, ./, / **/
Set : function_def{Devide_ReqURL} = "int Devide_ReqURL(U16 usURLSize, U8 *pURL, st_LIST *pBODY)"
int Devide_ReqURL(U16 usURLSize, U8 *pURL, st_LIST *pBODY)
{
	int         i , dRet = 0;
	int         dLast;
	STR_LIST    *pBODYSTR;

	pBODY->listcnt = 0;
	if(memcmp(pURL, "https", 5) == 0) {
		dLast = 8;
		i = 8;
	} else {
		dLast = 7;
		i = 7;
	}

	for(; i < usURLSize; i++)
	{
		dLast++;
		if(pURL[i] == '/') {
			pBODYSTR = &pBODY->strlist[pBODY->listcnt];
			pBODYSTR->len = dLast;

			if(pBODYSTR->len > MAX_BODY_STR_LEN) {
				pBODYSTR->len = MAX_BODY_STR_LEN;
				dRet++;
			}

			memcpy(pBODYSTR->str, pURL, pBODYSTR->len);
			pBODYSTR->str[pBODYSTR->len] = 0x00;
			pBODY->listcnt++;

			if(pBODY->listcnt == MAX_URL_CNT) {
				FPRINTF(LOG_BUG, "Devide_ReqURL :: pBODY->listcnt[%d] = MAX_URL_CNT[%d] BREAK URL[%.*s]",
					pBODY->listcnt, MAX_URL_CNT, MAX_URL_SIZE, pURL);
				dRet++;
				break;
			}
		} else if(pURL[i] == '?') {
			break;
		}
	} /* End of For i */

	if(pBODY->listcnt == 0) {
		pBODY->listcnt++;
		pBODYSTR = &pBODY->strlist[0];
		if(usURLSize > MAX_BODY_STR_LEN)
			pBODYSTR->len = MAX_BODY_STR_LEN;
		else 
			pBODYSTR->len = usURLSize;
		memcpy(pBODYSTR->str, pURL, pBODYSTR->len);
		if(pBODYSTR->len < MAX_BODY_STR_LEN && pBODYSTR->str[pBODYSTR->len - 1] != '/') {
			pBODYSTR->str[pBODYSTR->len] = '/';
			pBODYSTR->len++;
		}
		pBODYSTR->str[pBODYSTR->len] = 0x00;
	} else {
		pBODYSTR = &pBODY->strlist[pBODY->listcnt - 1];
		if(pBODYSTR->len < MAX_BODY_STR_LEN && pBODYSTR->str[pBODYSTR->len - 1] != '/') {
			pBODYSTR->str[pBODYSTR->len] = '/';
			pBODYSTR->len++;
			pBODYSTR->str[pBODYSTR->len] = 0x00;
		}
	}

	return dRet;
}

/** ABSOLUTE_URL STACK to Buffer  : BODY */
Set : function_def{Make_Absolute_URL_Buf} = "int Make_Absolute_URL_Buf(U16 usURLSize, U8 *szURL, U16 usLocSize, U8 *pLOC, U16 *pusOutSize, U8 *pOUTPUT)"
int Make_Absolute_URL_Buf(U16 usURLSize, U8 *szURL, U16 usLocSize, U8 *pLOC, U16 *pusOutSize, U8 *pOUTPUT)
{
	int         j, k, dRet;
	int         dFirst, dLast, dCount, dStop;
	st_LIST        stBODY;

	*pusOutSize = 0;
	pOUTPUT[0] = 0x00;
	dRet = Devide_ReqURL(usURLSize, szURL, &stBODY);
	if(dRet < 0) {  /* Error */
		FPRINTF(LOG_BUG, "Devide_ReqURL Ret =[%d] < 0", dRet);
		return -1;
	} else if(dRet > 0) { /* Warning */
		FPRINTF(LOG_LEVEL, "Devide_ReqURL Ret=[%d] URL[%.*s] > 0", dRet, MAX_URL_SIZE, szURL);
	}

	dFirst = 0; dLast = 0; dCount = 0; dStop = 0;
	for(j = 0; j < usLocSize; )
	{
		if(j == 0) {
			if( (usLocSize >= j + 3) && ((memcmp(pLOC+j , "http", 4) == 0) || (memcmp(pLOC+j , "rtsp", 4) == 0)) ) {
				dCount = stBODY.listcnt;
				Remake_URL_Buf(usLocSize, pLOC, pusOutSize, pOUTPUT);
				dStop = 2;
			} else if( (usLocSize >= j + 2) && (memcmp(pLOC+j , "../", 3) == 0) ) {
				dCount++;
				j += 3;
				dFirst = j;
			} else if(usLocSize >= j + 1 && memcmp(pLOC+j, "./", 2) == 0) {
				j += 2;
				dFirst = j;
			} else if(pLOC[j] == '/') {
				dCount = stBODY.listcnt - 1;
				dStop = 1;
				dFirst = 1;
			} else {
				dStop = 1;
			}
		} else {
			if( (usLocSize >= j + 2) && memcmp(pLOC+j , "../", 3) == 0) {
				dCount++;
				j += 3;
				dFirst = j;
			} else if(usLocSize >= j + 1 && memcmp(pLOC+j, "./", 2) == 0) {
				j += 2;
				dFirst = j;
			} else {
				dStop = 1;
			}
		}

		if(dStop > 0)
			break;
	} /* End of For j */

	/* if(dCount == 0) Current Directory */
	if(stBODY.listcnt > dCount) {
		dLast = usLocSize - dFirst;
		k = stBODY.listcnt - dCount - 1;
		memcpy(pOUTPUT, stBODY.strlist[k].str, stBODY.strlist[k].len);
		usLocSize = stBODY.strlist[k].len;
		if(usLocSize > MAX_BODY_STR_LEN - dLast)
			dLast = MAX_BODY_STR_LEN - usLocSize;
		usLocSize += DecordURLtoBuf(pLOC+dFirst, pOUTPUT+usLocSize, dLast);
		pOUTPUT[usLocSize] = 0x00;
		*pusOutSize = usLocSize;
		FPRINTF(LOG_LEVEL, "stBODY.listcnt[%d] = MAKE URL[%d][%.*s]",
			k, *pusOutSize, MAX_BODY_STR_LEN, pOUTPUT);
	} else if(dStop == 2) { 
		FPRINTF(LOG_LEVEL, "stBODY.listcnt[%d] = REMOVE PORT URL[%d][%.*s]\n",
			stBODY.listcnt, *pusOutSize, MAX_BODY_STR_LEN, pOUTPUT);
		;	/* Aleady Remake URL */
	} else {
		memcpy(pOUTPUT, pLOC, usLocSize);
		*pusOutSize = DecordURLtoBuf(pLOC, pOUTPUT, usLocSize);
		FPRINTF(LOG_LEVEL, "stBODY.listcnt[%d] = DONOT MAKE URL[%d][%.*s]\n",
			stBODY.listcnt, *pusOutSize, MAX_BODY_STR_LEN, pOUTPUT);
	}

	if(*pusOutSize > 2 && pOUTPUT[*pusOutSize - 1] == '/') {
		(*pusOutSize)--;
		pOUTPUT[*pusOutSize] = 0x00;
		FPRINTF(LOG_LEVEL, "stBODY.listcnt[%d] = Remove / URL[%d][%.*s]\n",
			stBODY.listcnt, *pusOutSize, MAX_BODY_STR_LEN, pOUTPUT);
	}


	return 0;
}

/** ABSOLUTE_URL STACK to Buffer  : BODY */
Set : function_def{Make_Absolute_URL_Buf_URLLIST} = "int Make_Absolute_URL_Buf_URLLIST(st_LIST *pLIST, U16 usLocSize, U8 *pLOC, U16 *pusOutSize, U8 *pOUTPUT)"
int Make_Absolute_URL_Buf_URLLIST(st_LIST *pLIST, U16 usLocSize, U8 *pLOC, U16 *pusOutSize, U8 *pOUTPUT)
{
	int         j, k;
	int         dFirst, dLast, dCount, dStop;

	*pusOutSize = 0;
	pOUTPUT[0] = 0x00;

	dFirst = 0; dLast = 0; dCount = 0; dStop = 0;
	for(j = 0; j < usLocSize; )
	{
		if(j == 0) {
			if( (usLocSize >= j + 3) && ((memcmp(pLOC+j , "http", 4) == 0) || (memcmp(pLOC+j , "rtsp", 4) == 0)) ) {
				dCount = pLIST->listcnt;
				Remake_URL_Buf(usLocSize, pLOC, pusOutSize, pOUTPUT);
				dStop = 2;
			} else if( (usLocSize >= j + 2) && (memcmp(pLOC+j , "../", 3) == 0) ) {
				dCount++;
				j += 3;
				dFirst = j;
			} else if(usLocSize >= j + 1 && memcmp(pLOC+j, "./", 2) == 0) {
				j += 2;
				dFirst = j;
			} else if(pLOC[j] == '/') {
				dCount = pLIST->listcnt - 1;
				dStop = 1;
				dFirst = 1;
			} else {
				dStop = 1;
			}
		} else {
			if( (usLocSize >= j + 2) && memcmp(pLOC+j , "../", 3) == 0) {
				dCount++;
				j += 3;
				dFirst = j;
			} else if(usLocSize >= j + 1 && memcmp(pLOC+j, "./", 2) == 0) {
				j += 2;
				dFirst = j;
			} else {
				dStop = 1;
			}
		}

		if(dStop > 0)
			break;
	} /* End of For j */

	/* if(dCount == 0) Current Directory */
	if(pLIST->listcnt > dCount) {
		dLast = usLocSize - dFirst;
		k = pLIST->listcnt - dCount - 1;
		memcpy(pOUTPUT, pLIST->strlist[k].str, pLIST->strlist[k].len);
		usLocSize = pLIST->strlist[k].len;
		if(usLocSize > MAX_BODY_STR_LEN - dLast)
			dLast = MAX_BODY_STR_LEN - usLocSize;
		usLocSize += DecordURLtoBuf(pLOC+dFirst, pOUTPUT+usLocSize, dLast);
		pOUTPUT[usLocSize] = 0x00;
		*pusOutSize = usLocSize;
		FPRINTF(LOG_LEVEL, "pLIST->listcnt[%d] = MAKE URL[%d][%.*s]", k, *pusOutSize, MAX_BODY_STR_LEN, pOUTPUT);
	} else if(dStop == 2) {
		FPRINTF(LOG_LEVEL, "pLIST->listcnt[%d] = REMOVE PORT URL[%d][%.*s]", k, *pusOutSize, MAX_BODY_STR_LEN, pOUTPUT);
		; /* Aleady Remake URL */
	} else {
		memcpy(pOUTPUT, pLOC, usLocSize);
		*pusOutSize = DecordURLtoBuf(pLOC, pOUTPUT, usLocSize);
		pOUTPUT[usLocSize] = 0x00;
		FPRINTF(LOG_LEVEL, "pLIST->listcnt[%d] = DONOT MAKE URL[%d][%.*s]\n",
			pLIST->listcnt, *pusOutSize, MAX_BODY_STR_LEN, pOUTPUT);
	}

	if(*pusOutSize > 2 && pOUTPUT[*pusOutSize - 1] == '/') {
		(*pusOutSize)--;
		pOUTPUT[*pusOutSize] = 0x00;
		FPRINTF(LOG_LEVEL, "pLIST->listcnt[%d] = REMOVE / URL[%d][%.*s]\n",
			pLIST->listcnt, *pusOutSize, MAX_BODY_STR_LEN, pOUTPUT);
	}

	return 0;
}

/** ABSOLUTE_URL STACK to Buffer  : BODY */
Set : function_def{Make_Absolute_URL_URLLIST} = "int Make_Absolute_URL_URLLIST(st_LIST *pLIST, U16 *pusInOutSize, U8 *pInOUTPUT)"
int Make_Absolute_URL_URLLIST(st_LIST *pLIST, U16 *pusInOutSize, U8 *pInOUTPUT)
{
    int         j, k;
    int         dFirst, dLast, dCount, dStop;

	U16			usTempURL;
    U8          szTempURL[MAX_BODY_STR_SIZE];

    dFirst = 0; dLast = 0; dCount = 0; dStop = 0;
    for(j = 0; j < *pusInOutSize; )
    {
        if(j == 0) {
            if( (*pusInOutSize >= j + 3) && 
				((memcmp(pInOUTPUT+j , "http", 4) == 0) || (memcmp(pInOUTPUT+j , "rtsp", 4) == 0))) {
                dCount = pLIST->listcnt;

				usTempURL = *pusInOutSize;	
				memcpy(szTempURL, pInOUTPUT, usTempURL);
				szTempURL[usTempURL] = 0x00;
				Remake_URL_Buf(usTempURL, szTempURL, pusInOutSize, pInOUTPUT);

                dStop = 2;
            } else if( (*pusInOutSize >= j + 2) && (memcmp(pInOUTPUT+j , "../", 3) == 0) ) {
                dCount++;
                j += 3;
                dFirst = j;
            } else if(*pusInOutSize >= j + 1 && memcmp(pInOUTPUT+j, "./", 2) == 0) {
                j += 2;
                dFirst = j;
            } else if(pInOUTPUT[j] == '/') {
                dCount = pLIST->listcnt - 1;
                dStop = 1;
                dFirst = 1;
            } else {
                dStop = 1;
            }
        } else {
            if( (*pusInOutSize >= j + 2) && memcmp(pInOUTPUT+j , "../", 3) == 0) {
                dCount++;
                j += 3;
                dFirst = j;
            } else if(*pusInOutSize >= j + 1 && memcmp(pInOUTPUT+j, "./", 2) == 0) {
                j += 2;
                dFirst = j;
            } else {
                dStop = 1;
            }
        }

        if(dStop > 0)
            break;
    } /* End of For j */

    /* if(dCount == 0) Current Directory */
    if(pLIST->listcnt > dCount) {
        dLast = *pusInOutSize - dFirst;
		dLast = DecordURLtoBuf(pInOUTPUT+dFirst, szTempURL, dLast);
        k = pLIST->listcnt - dCount - 1;
        memcpy(pInOUTPUT, pLIST->strlist[k].str, pLIST->strlist[k].len);
        *pusInOutSize = pLIST->strlist[k].len;

        if(*pusInOutSize > MAX_BODY_STR_LEN - dLast)
			dLast = MAX_BODY_STR_LEN - *pusInOutSize;

        memcpy(pInOUTPUT+(*pusInOutSize), szTempURL, dLast);
        *pusInOutSize += dLast;
        pInOUTPUT[*pusInOutSize] = 0x00;
        FPRINTF(LOG_LEVEL, "pLIST->listcnt[%d] = MAKE URL[%d][%.*s]", k, *pusInOutSize, MAX_BODY_STR_LEN, pInOUTPUT);
    } else {
        FPRINTF(LOG_LEVEL, "pLIST->listcnt[%d] = DONOT MAKE URL[%d][%.*s]\n",
            pLIST->listcnt, *pusInOutSize, MAX_BODY_STR_LEN, pInOUTPUT);
    }

	if(*pusInOutSize > 2 && pInOUTPUT[*pusInOutSize - 1] == '/') {
		(*pusInOutSize)--;
		pInOUTPUT[*pusInOutSize] = 0x00;
        FPRINTF(LOG_LEVEL, "pLIST->listcnt[%d] = Remove / URL[%d][%.*s]\n",
            pLIST->listcnt, *pusInOutSize, MAX_BODY_STR_LEN, pInOUTPUT);
	}

    return 0;
}

/** DECODE URL to BUF */
Set : function_def{DecodeURL} = "int DecordURLtoBuf(unsigned char *source, unsigned char *dest, U16 usSize)"
int DecordURLtoBuf(U8 *source, U8 *dest, U16 usSize)
{
	int num=0, i, j, index=0;
	int retval=0;

	for(j = 0; j < usSize; j++)
	{
		if (*source == '%') {
			num = 0;
			retval = 0;

			if (*(source+1)=='2' && *(source+2) =='5') {
				source+=2;
				j+=2;
			}

			for (i = 0; i < 2; i++)
			{
				source++;
				j++;

				if ( *source==0 ) {
					dest[index]=0;
					return index;
				}

				if (*(source) < ':')
					num = *(source) - 48;
				else if (*(source) > '@' && *(source) < '[')
					num = (*(source) - 'A')+10;
				else
					num = (*(source) - 'a')+10;

				if ((16*(1-i))) 
					num = (num*16);
				retval += num;
			}

			dest[index] = retval;
			index++;

		} else {
			dest[index] = *source;
			index++;
		}

		source++;
    }

	dest[index]=0;
    return index;
}

#ifdef TEST
main( argc, argv )
int argc;
char **argv;
{
	int size=0;
	char buf[BUFSIZ];
	char s[BUFSIZ],d[BUFSIZ];
	FILE *fp;

	memset(s,0,BUFSIZ);
	memset(d,0,BUFSIZ);

	fp = fopen("../DATA/BODY.DAT","r");

	while(fgets(buf,BUFSIZ,fp)){
		if( (size + strlen(buf)) >= BUFSIZ) break;
		sprintf(s,"%s%s\n",s,buf);
		size += strlen(buf);
	};

    BODY_LEX(s,size,d,0,0);
}
#endif


