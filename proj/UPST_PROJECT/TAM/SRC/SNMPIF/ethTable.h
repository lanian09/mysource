/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.2 2004/02/09 18:21:47 rstory Exp $
 *
 * $Id: ethTable.h,v 1.1 2011/08/31 11:24:19 hhbaek Exp $
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef ETHTABLE_H
#define ETHTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index ethIndex is internal */

    typedef struct ethTable_context_s {
        netsnmp_index   index;
                         /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
        /** INTEGER32 = ASN_INTEGER */
        long            ethIndex;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   ethSystem[65535];
        long            ethSystem_len;

        /** INTEGER32 = ASN_INTEGER */
        long            ethPort;

        /** INTEGER32 = ASN_INTEGER */
        long            ethStatus;


        /*
         * OR
         *
         * Keep a pointer to your data
         */
        void           *data;

        /*
         *add anything else you want here
         */

    } ethTable_context;

/*************************************************************
 * function declarations
 */
    void            init_ethTable(void);
    void            initialize_table_ethTable(void);
    const ethTable_context *ethTable_get_by_idx(netsnmp_index *);
    const ethTable_context *ethTable_get_by_idx_rs(netsnmp_index *,
                                                   int row_status);
    int             ethTable_get_value(netsnmp_request_info *,
                                       netsnmp_index *,
                                       netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
    extern oid      ethTable_oid[];
    extern size_t   ethTable_oid_len;

#define ethTable_TABLE_OID 1,3,6,1,4,1,28795,2,3

/*************************************************************
 * column number definitions for table ethTable
 */
#define COLUMN_ETHINDEX 1
#define COLUMN_ETHSYSTEM 2
#define COLUMN_ETHPORT 3
#define COLUMN_ETHSTATUS 4
#define ethTable_COL_MIN 1
#define ethTable_COL_MAX 4

    /*
     * comment out the following line if you don't handle SET-REQUEST for ethTable 
     */
#define ethTable_SET_HANDLING

    /*
     * comment out the following line if you can't create new rows 
     */
#define ethTable_ROW_CREATION

    /*
     * comment out the following line if you don't want the secondary index 
     */
#define ethTable_IDX2

#ifdef ethTable_SET_HANDLING

    int             ethTable_extract_index(ethTable_context * ctx,
                                           netsnmp_index * hdr);

    void            ethTable_set_reserve1(netsnmp_request_group *);
    void            ethTable_set_reserve2(netsnmp_request_group *);
    void            ethTable_set_action(netsnmp_request_group *);
    void            ethTable_set_commit(netsnmp_request_group *);
    void            ethTable_set_free(netsnmp_request_group *);
    void            ethTable_set_undo(netsnmp_request_group *);

    ethTable_context *ethTable_duplicate_row(ethTable_context *);
    netsnmp_index  *ethTable_delete_row(ethTable_context *);

    int             ethTable_can_delete(ethTable_context * undo_ctx,
                                        ethTable_context * row_ctx,
                                        netsnmp_request_group * rg);


#ifdef ethTable_ROW_CREATION
    ethTable_context *ethTable_create_row(netsnmp_index *);
#endif
#endif

#ifdef ethTable_IDX2
    ethTable_context *ethTable_get(const char *name, int len);
#endif

#ifdef __cplusplus
};
#endif

#endif /** ETHTABLE_H */
